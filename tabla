TIPO_DATO int int _R1
TIPO_DATO double double _R2
TIPO_DATO string string _R3
TIPO_DATO char char _R4
TIPO_DATO void void _R5
FUNCION int TIPO_DATO TIPO_FUNCION
FUNCION double TIPO_DATO TIPO_FUNCION
FUNCION string TIPO_DATO TIPO_FUNCION
FUNCION char TIPO_DATO TIPO_FUNCION
FUNCION void TIPO_DATO TIPO_FUNCION
PARAMETROS int TIPO_DATO NOMBRE_VARIABLE L
PARAMETROS double TIPO_DATO NOMBRE_VARIABLE L
PARAMETROS string TIPO_DATO NOMBRE_VARIABLE L
PARAMETROS char TIPO_DATO NOMBRE_VARIABLE L
PARAMETROS void TIPO_DATO NOMBRE_VARIABLE L
PARAMETROS ) epsilon
TIPO_FUNCION main main ( ) { LISTA_SENTENCIAS RETURN }
TIPO_FUNCION variable variable ( PARAMETROS ) { LISTA_SENTENCIAS RETURN } FUNCION
L ) epsilon
L , , PARAMETROS
LISTA_SENTENCIAS int SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS double SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS string SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS char SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS void SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS cout SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS cin SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS variable SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS if SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS while SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS for SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS return epsilon
LISTA_SENTENCIAS break SENTENCIA LISTA_SENTENCIAS
LISTA_SENTENCIAS } epsilon
SENTENCIA int LINEA_SIMPLE ;
SENTENCIA double LINEA_SIMPLE ;
SENTENCIA string LINEA_SIMPLE ;
SENTENCIA char LINEA_SIMPLE ;
SENTENCIA void LINEA_SIMPLE ;
SENTENCIA cout LINEA_SIMPLE ;
SENTENCIA cin LINEA_SIMPLE ;
SENTENCIA variable LINEA_SIMPLE ;
SENTENCIA return LINEA_SIMPLE ;
SENTENCIA break LINEA_SIMPLE ;
SENTENCIA if IF_ELSE
SENTENCIA while WHILE
SENTENCIA for FOR
OPERADORES + +
OPERADORES - -
OPERADORES * *
OPERADORES / /
OPERADORES % %
OPERADORES_COMPARACION > >
OPERADORES_COMPARACION >= >=
OPERADORES_COMPARACION < <
OPERADORES_COMPARACION <= <=
OPERADORES_COMPARACION == ==
OPERADORES_COMPARACION != !=
SIMBOLOS_COMPARACION && &&
SIMBOLOS_COMPARACION || ||
OUTPUT cout cout << EXPRESION I
INPUT cin cin >> NOMBRE_VARIABLE
I ; epsilon
I << <<
LINEA_SIMPLE int DECLARACION
LINEA_SIMPLE double DECLARACION
LINEA_SIMPLE string DECLARACION
LINEA_SIMPLE char DECLARACION
LINEA_SIMPLE void DECLARACION
LINEA_SIMPLE cout OUTPUT
LINEA_SIMPLE cin INPUT
LINEA_SIMPLE variable ASIGNACION
LINEA_SIMPLE break PALABRAS_RESERVADAS
DECLARACION int TIPO_DATO NOMBRE_VARIABLE _R6 X _R15
DECLARACION double TIPO_DATO NOMBRE_VARIABLE _R6 X _R22
DECLARACION string TIPO_DATO NOMBRE_VARIABLE _R6 X _R23
DECLARACION char TIPO_DATO NOMBRE_VARIABLE _R6 X _R24
DECLARACION void TIPO_DATO NOMBRE_VARIABLE _R6 X 
DECLARACION_ASIGNACION ; epsilon
DECLARACION_ASIGNACION = = P _R13
X , , NOMBRE_VARIABLE _R8 X
X = DECLARACION_ASIGNACION _R14
X ; epsilon
NOMBRE_VARIABLE variable variable S _R7
S ( ( LLAMADA_PARAMETROS )
S [ [ EXPRESION ]
S ++ epsilon
S -- epsilon
S = epsilon
S , epsilon
S ; epsilon
S + epsilon
S - epsilon
S > epsilon
S >= epsilon
S < epsilon
S <= epsilon
S == epsilon
S != epsilon
S * epsilon
S / epsilon
S % epsilon
S } epsilon
S && epsilon
S || epsilon
S ) epsilon
S ] epsilon
S << epsilon
LLAMADA_PARAMETROS ( EXPRESION MAS_PARAMETROS
LLAMADA_PARAMETROS valor_entero EXPRESION MAS_PARAMETROS
LLAMADA_PARAMETROS valor_double EXPRESION MAS_PARAMETROS
LLAMADA_PARAMETROS valor_cadena EXPRESION MAS_PARAMETROS
LLAMADA_PARAMETROS valor_caracter EXPRESION MAS_PARAMETROS
LLAMADA_PARAMETROS valor_bool EXPRESION MAS_PARAMETROS
LLAMADA_PARAMETROS valor_void EXPRESION MAS_PARAMETROS
LLAMADA_PARAMETROS variable EXPRESION MAS_PARAMETROS
MAS_PARAMETROS , , EXPRESION MAS_PARAMETROS
MAS_PARAMETROS ) epsilon
ASIGNACION variable NOMBRE_VARIABLE TIPO_ASIGNACION _R21
TIPO_ASIGNACION ++ ++
TIPO_ASIGNACION -- --
TIPO_ASIGNACION = = P _R20
P ( EXPRESION
P valor_entero EXPRESION _R12
P valor_double EXPRESION _R12
P variable EXPRESION _R12
P valor_cadena EXPRESION _R12
P valor_caracter EXPRESION _R12
P valor_bool EXPRESION _R12
P valor_void EXPRESION 
P { VALOR_ARRAY
VALORES valor_entero valor_entero _R9
VALORES valor_double valor_double _R16
VALORES variable NOMBRE_VARIABLE
VALORES valor_cadena valor_cadena _R17
VALORES valor_caracter valor_caracter _R18
VALORES valor_bool valor_bool _R19
VALORES valor_void valor_void
VALOR_ARRAY { { EXPRESION V }
V , , EXPRESION V
V } epsilon
OPERADOR + OPERADORES
OPERADOR - OPERADORES
OPERADOR * OPERADORES
OPERADOR / OPERADORES
OPERADOR % OPERADORES
OPERADOR > OPERADORES_COMPARACION
OPERADOR >= OPERADORES_COMPARACION
OPERADOR < OPERADORES_COMPARACION
OPERADOR <= OPERADORES_COMPARACION
OPERADOR == OPERADORES_COMPARACION
OPERADOR != OPERADORES_COMPARACION
EXPRESION ( TIPO_FACTOR E
EXPRESION variable TIPO_FACTOR _R11 E
EXPRESION valor_cadena TIPO_FACTOR  _R11 E
EXPRESION valor_caracter TIPO_FACTOR  _R11 E
EXPRESION valor_bool TIPO_FACTOR _R11 E
EXPRESION valor_void TIPO_FACTOR _R11 E
EXPRESION valor_entero TIPO_FACTOR _R11 E
EXPRESION valor_double TIPO_FACTOR _R11 E
TIPO_FACTOR ( ( EXPRESION )
TIPO_FACTOR valor_cadena VALORES _R10
TIPO_FACTOR valor_caracter VALORES _R10
TIPO_FACTOR valor_entero VALORES _R10
TIPO_FACTOR valor_double VALORES _R10
TIPO_FACTOR valor_bool VALORES _R10
TIPO_FACTOR valor_void VALORES
TIPO_FACTOR variable VALORES _R10
E + OPERADOR EXPRESION
E - OPERADOR EXPRESION
E > OPERADOR EXPRESION
E >= OPERADOR EXPRESION
E < OPERADOR EXPRESION
E <= OPERADOR EXPRESION
E == OPERADOR EXPRESION
E != OPERADOR EXPRESION
E * OPERADOR EXPRESION
E / OPERADOR EXPRESION
E % OPERADOR EXPRESION
E && epsilon
E || epsilon
E ) epsilon
E ] epsilon
E , epsilon
E << epsilon
E ; epsilon
E } epsilon
IF_ELSE if IF ELIF ELSE
IF if if ( CONDICION ) { LISTA_SENTENCIAS }
ELSE int epsilon
ELSE double epsilon
ELSE string epsilon
ELSE char epsilon
ELSE void epsilon
ELSE break epsilon
ELSE cout epsilon
ELSE variable epsilon
ELSE cin epsilon
ELSE while epsilon
ELSE for epsilon
ELSE if epsilon
ELSE } epsilon
ELSE return epsilon
ELSE else else { LISTA_SENTENCIAS }
ELIF int epsilon
ELIF double epsilon
ELIF char epsilon
ELIF string epsilon
ELIF void epsilon
ELIF cout epsilon
ELIF cin epsilon
ELIF variable epsilon
ELIF if epsilon
ELIF else epsilon
ELIF elif elif ( CONDICION ) { LISTA_SENTENCIAS }
ELIF while epsilon
ELIF for epsilon
ELIF return epsilon
ELIF break epsilon
ELIF } epsilon
WHILE while while ( CONDICION ) { LISTA_SENTENCIAS }
FOR for for ( DECLARACION_FOR ; CONDICION ; ASIGNACION ) { LISTA_SENTENCIAS }
DECLARACION_FOR ; epsilon
DECLARACION_FOR variable ASIGNACION
DECLARACION_FOR int DECLARACION
DECLARACION_FOR double DECLARACION
DECLARACION_FOR string DECLARACION
DECLARACION_FOR char DECLARACION
DECLARACION_FOR void DECLARACION
CONDICION ( EXPRESION C
CONDICION valor_cadena EXPRESION C
CONDICION valor_entero EXPRESION C
CONDICION valor_double EXPRESION C
CONDICION valor_caracter EXPRESION C
CONDICION valor_bool EXPRESION C
CONDICION valor_void EXPRESION C
CONDICION variable EXPRESION C
C && SIMBOLOS_COMPARACION CONDICION
C || SIMBOLOS_COMPARACION CONDICION
C ) epsilon
C ; epsilon
PALABRAS_RESERVADAS break break
RETURN return return DATA ;
DATA ( EXPRESION
DATA valor_cadena EXPRESION
DATA valor_caracter EXPRESION
DATA valor_bool EXPRESION
DATA valor_void EXPRESION
DATA valor_entero EXPRESION
DATA valor_double EXPRESION
DATA variable EXPRESION
DATA ; epsilon